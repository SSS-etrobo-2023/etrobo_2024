### ソースコードのメモ ###
実装上必要そうな情報を覚書として以下にまとめる

# ソースコードの管理について
cd ~/etrobo_2024/workspace/
cp master/ <個人用のディレクトリ>/
を実行して、それぞれ個人用のディレクトリを作成し、そのファイルを修正してください。
(ソースコードの衝突を避けるため)

個人用のディレクトリを作成したら、
git config --global user.name "w_kuraya"
git config --global user.email "w-kuraya@sss-i.co.jp"
で git の config にユーザ情報を登録します。(各自の名前に置き換えてください)

次に、
cd ~/etrobo_2024/
git pull
git add workspace/<個人用のディレクトリ>/
git commit → 適当なコミットログを入力
git push origin main
を実行して、修正をリモートリポジトリにプッシュします。
(プッシュ前は、リモートリポジトリが更新されていないか必ず確認するため、
 git pull は忘れずにするようにしてください)
git の概要については下記参照してください。
https://backlog.com/ja/git-tutorial/

master ディレクトリは、それぞれの修正でうまく機能するようになったものをマージしていきます。


# compile.sh について
git(開発)環境と動作環境を別にしてしまったので、
動作検証する場合は git環境から動作環境にコピーして、make img, make start する必要があります。
これを一括で実施するスクリプトが compile.sh となります。
./compile.sh <make 対象のディレクトリ>
で使用可能です。


# デバッグログの出力方法
common.h にある、
LOG_D_TEST, LOG_D_DEBUG, LOG_D_ERROR
のマクロを使用することで、標準出力にログを出力する。
使用方法は printf() と同じです。
このマクロを使用せず、printf() を使用してもよいです。

LOG_LEVEL の値を変えることで、出力されるログを変更できる。
3(TEST) の場合はすべて出力されるが、
2(DEBUG) にすると、ERROR, DEBUG しか出力されなくなる。


# デバッグログのファイル出力
common.h
#undef OUTLOG_FILE
をコメントアウトすることで、ログをファイルに出力するようになる。
デフォルトは /tmp/log.txt に吐き出します。(ラズパイを再起動させると消えるので注意!)

・コマンドプロンプト(SSH で接続していない状態)上で、
scp <ラズパイのユーザ名>@<ラズパイのIPアドレス>:/tmp/log.txt <Windows上の任意のフォルダのパス>

・Teraterm で接続し、ファイル(F) → SSH SCP
  From に /tmp/log.txt
  To に Windows上の任意のフォルダのパス

などでファイルを取得できる。


# Cファイルを新たに増やす方法
・任意のCファイル(ここでは hoge.c) を作成する
・Makefile.inc を開き、5行目あたりに
  hoge.o\
  を追記する
・app.cfg を開き、最後の行に
  ATT_MOD("hoge.o");
  を追記する

※Makefile.inc と同じディレクトリの直下にファイルを作成することが前提。
  LineTracer.c のように、一段階深いディレクトリにある Cソースの増やし方は不明(未検証)です。


# tracer_task() の呼び出し周期
ライントレースは最初に app.c の main_task() が呼ばれ、
LineTracer.c の tracer_task() が定期的に呼ばれることにより行われる。

tracer_task() の呼び出し周期は、
app.h の LINE_TRACER_PERIOD を変更することで変えられる。

周期を短くすると計算回数が多くなる分、より滑らかに動くようになるが、
あまり短くしすぎてもだめらしい。
どこかで 4msec が限度、というような記載を見た覚えがあるが忘れたので、思い出したら追記します...


# テスト用ファイルについて
test.c は動作検証用のファイルになります。
common.h
#undef MODO_TEST
をコメントアウトすると、ライントレースの代わりに test.c のソースが動きます。
test_main() に 0 を渡すと、カラーセンサの値とその色をどう判定したか、
test_main() に 1 を渡すと、カラーセンサの反射値をそれぞれ 1秒周期で出力します。


# カラーセンサの判定について
カラーセンサの値の判定処理は、
color.c
judge_color()
で行っています。
この判定に使用する各色の閾値は、color.h に定義されているため、それぞれの走行体に合わせて修正してください。

